
Generate a complete Selenium + Java + BDD + POM test automation framework for any web application's UI. The framework must:

Create Page Object classes with @FindBy annotations for all UI elements on each page.
Implement Step Definitions that utilize all Page Object methods and variables.
Generate Feature files with both positive and negative scenarios, inferred from the UI and business logic.
Include multiple Page Object classes, Step Definitions, and Feature files as needed for all UI components and flows.
Integrate Extent Reports for test reporting, using the latest compatible Cucumber adapter (e.g., tech.grasshopper:extentreports-cucumber7-adapter).
Support cross-browser testing (at least Chrome and Firefox) via a configuration file.
Use implicit waits to avoid flaky tests.
Provide a configuration file with browser, URL, and report path settings.
Provide a pom.xml with dependencies for:
Selenium (latest stable version)
WebDriverManager (latest stable version)
Cucumber Java & JUnit
Extent Reports
ExtentReports Cucumber7 adapter (tech.grasshopper:extentreports-cucumber7-adapter)
Use a professional, scalable project structure:
pages
utils
stepdefinitions
runners
hooks
features
config
testdata
Ensure the framework is ready to run with no manual changes required.
Handle any UI popups or overlays that may block interactions.
Ensure all error message assertions match the actual UI output.

________________________________________________________________________________________________________________________________________

I want to generate a complete Selenium + Java + BDD + POM test automation framework from a UI screenshot. The AI should analyze the screenshot and automatically generate:
 
✅ Page Object classes with @FindBy annotations for all UI elements.
✅ Step Definitions that utilize all methods and variables from the Page Object classes.
✅ Feature files with dynamic test scenarios (positive and negative) inferred from the UI.
✅ Multiple Page Object classes, Step Definitions, and Feature files based on the UI components.
✅ Extent Reports integration for test reporting.
✅ Cross-browser support (Chrome and Firefox) via config.properties.
✅ Implicit waits of 20 seconds to avoid flaky tests.
✅ A config.properties file
✅ A pom.xml with dependencies for:
 
Selenium 4.24.0
WebDriverManager 5.9.2
Cucumber Java & JUnit
Extent Reports
✅ The project structure must follow MNC/product-based company standards:
 
src/main/java/pages
src/main/java/utils
src/test/java/stepdefinitions
src/test/java/runners
src/test/java/hooks
src/test/resources/features
src/test/resources/config
src/test/resources/testdata
✅ The output should be a ZIP file with complete working logic, ready to run without manual changes.
